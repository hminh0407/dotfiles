[include]
    path = "~/workspace/.gitconfig-workspace"

[core]
    editor = vim
    whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
    excludesfile = ~/.gitignore
    pager = delta

[diff]
    tool = vimdiff
    colorMoved = zebra

[delta]
    syntax-theme = gruvbox
    line-numbers = true
    side-by-side = true
    inspect-raw-lines = false

[difftool]
    prompt = false

[alias]
    # list all git alias
    # do not use "_" when naming alias
    alias-ls = "!git config -l | grep alias | cut -c 7-"

    a = add

    br = branch

    br-ls-local  = "!git fetch -p && git branch -vv | cut -c 3- | grep -v origin | awk '{ print $1 }'"
    br-ls-remote = "!git fetch -p && git branch -vv | cut -c 3- | grep origin | awk '{ print $1 }'"

    # branch that has been removed from remote
    br-ls-gone   = "!git fetch -p && git branch -vv | cut -c 3- | awk '/: gone]/{print $1}'"

    # delete both local and remote
    br-dl = "!f() { \
        git push -d origin "$@"; \
        git branch -D "$@"; \
    }; f"
    br-dl-local-untracked = "!git branch -D $(git local-branches)"
    br-dl-local-gone = "!git branch -D $(git br-ls-gone)"
    br-dl-local = branch -d
    br-dl-remote = push -d

    br-ck-exist = "rev-parse --verify --quiet"

    br-current = "rev-parse --abbrev-ref HEAD"

    ; cl = clone --recursive --depth=1

    ; clone git if not exist, pull latest code if exist, accept a custom folder path
    ; ex: git cl https://github.com/zimfw/zimfw -> clone to ./zimfw folder
    ; ex: git cl https://github.com/zimfw/zimfw zimzsh -> clone to ./zimzsh folder
    cl = "!f() { \
        [ -z "$1" ] && { echo  "missing argument: repo"; exit 1; }; \
        local repo="$1"; \
        local localFolder="$2"; \
        if [ -z "$localFolder" ]; then \
            localFolder="$(basename $repo)"; \
        else \
            mkdir -p "$localFolder"; \
        fi; \
        git -C $localFolder pull || git clone --depth=1 --recursive $repo $localFolder; \
    }; f"

    # dry-run, only show what would be removed
    clean-dry = clean -n
    # remove all untracked files and dir
    clean-untracked = clean -f -d

    cm = commit -m

    co = checkout
    cob = checkout -b

    f = fetch origin -p

    is-in-git-repo = "!git rev-parse --is-inside-work-tree 2>/dev/null"
        # can be used with bash script like below
        # if [ "$(git is-in-git-repo)" ]; then echo "in git repo"; fi;

    # log
    log-last-comment="!git log -1 --pretty=%B | awk NF"
        # get the comment from last commit

    pl = pull --rebase --prune

    ps = push --set-upstream origin
    psf = push -f --set-upstream origin

    rb = rebase
    rba = rebase --abort
    rbc = rebase --continue

    rp = "!git remote get-url origin | sed -E 's#^.*:(.*).git$#\\1#'"
    rp-local-dir = "!git rev-parse --show-toplevel" # find the full local path of current project dir
    rp-platform = "!git remote get-url origin | sed -E 's#^.*@(.*):.*.git$#\\1#'"
    rp-url = "!echo http://$(git rp-platform)/$(git rp)"

    ; get repo name
    ; ex: git rp-extract-name https://github.com/anishathalye/dotbot -> dotbot
    rp-extract-name = "!f() { \
        local repo="${1:-$(git rp-url)}"; \
        local name="$(basename $repo)"; \
        local nameWithoutSuffix="${name%.*}"; \
        echo "$nameWithoutSuffix"; \
    }; f"

    ; get repo host name
    ; ex: git rp-extract-hostname https://github.com/anishathalye/dotbot -> anishathalye
    rp-extract-hostname = "!f() { \
        local repo="${1:-$(git rp-url)}"; \
        local name="$(git rp-extract-name $repo)"; \
        local hostname="$(basename ${repo%/${name}})"; \
        echo "$hostname"; \
    }; f"

    ; get repo full name
    ; ex: git rp-extract-fullname https://github.com/anishathalye/dotbot -> anishathalye/dotbot
    rp-extract-fullname = "!f() { \
        local repo="${1:-$(git rp-url)}"; \
        local name="$(git rp-extract-name $repo)"; \
        local hostname="$(git rp-extract-hostname $repo)"; \
        local fullname="$hostname/$name"; \
        echo "$fullname"; \
    }; f"

    ; get repo latest release
    rp-latest-release = "!f() { \
        local repo="${1:-$(git rp-url)}"; \
        local fullname="$(git rp-extract-fullname $repo)"; \
        curl --silent "https://api.github.com/repos/$fullname/releases/latest" | jq '.tag_name' --raw-output; \
    }; f"

    rs = reset
    rs1 = reset HEAD~1
    rs2 = reset HEAD~2
    rs3 = reset HEAD~3

    open = "!xdg-open $(git rp-url)"

    st = status

    s = stash list
    sa = stash apply
    ss = stash save

    # submodule
    sm = submodule
    ism = submodule init
    asm = submodule add -f
    lsm = submodule status --recursive
    usm = submodule update --init --recursive
    dsm = "!f() { \
        git submodule deinit -f "$@"; \
        git rm -f "$@"; \
        rm -rf ".git/modules/$@"; \
    }; f"

    usr = shortlog -s -n
        # get list of contributor and their commits
        # the list is ordered by most contributed (first user)
