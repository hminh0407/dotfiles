# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt


# taken from: https://github.com/honza/vim-snippets
snippet #!
#!/usr/bin/env python3
endsnippet

snippet imp
import ${0:module}
endsnippet

snippet from
from ${1:package} import ${0:module}
endsnippet

snippet wh
while ${1:condition}:
	${0:${VISUAL}}
endsnippet

# dowh - does the same as do...while in other languages
snippet dowh
while True:
	${1}
	if ${0:condition}:
		break
endsnippet

snippet with
with ${1:expr} as ${2:var}:
	${0:${VISUAL}}
endsnippet

snippet awith
async with ${1:expr} as ${2:var}:
	${0:${VISUAL}}
endsnippet

snippet cl
class ${1:ClassName}(${2:object}):
	"""${3:docstring for $1}"""
	def __init__(self, ${4:arg}):
		${5:super($1, self).__init__()}
		self.$4 = $4
		${0}
endsnippet

snippet csv
def to_csv(data):
	import csv
	import sys

	if data:
		if isinstance(data, dict): # convert dict to csv and write to stdout
			w = csv.DictWriter(sys.stdout, data.keys())
			w.writeheader()
			w.writerow(data)
		else: # convert list to csv and write to stdout
			w = csv.DictWriter(sys.stdout, data[0].keys())
			w.writeheader()
			w.writerows(data)
endsnippet

snippet if
if ${1:condition}:
	${0:${VISUAL}}
endsnippet

snippet el
else:
	${0:${VISUAL}}
endsnippet

snippet ei
elif ${1:condition}:
	${0:${VISUAL}}
endsnippet

snippet for
for ${1:item} in ${2:items}:
	${0}
endsnippet

snippet try Try/Except
try:
	${1:${VISUAL}}
except ${2:Exception} as ${3:e}:
	${0:raise $3}
endsnippet

snippet trye
try:
	${1:${VISUAL}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${0}
endsnippet

snippet tryf
try:
	${1:${VISUAL}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${0}
endsnippet

snippet tryef
try:
	${1:${VISUAL}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5}
finally:
	${0}
endsnippet

snippet pdb
__import__('pdb').set_trace()
endsnippet

# ipython debugger (ipdb)
snippet ipdb
__import__('ipdb').set_trace()
endsnippet

snippet a=
self.assertEqual(${0}, ${1})
endsnippet

# test case
snippet testcase
class ${1:ExampleCase}(unittest.TestCase):

	def test_${2:description}(self):
		${0}
endsnippet

# logging
# glog = get log
snippet glog
import logging
LOGGER = logging.getLogger(${0:__name__})
endsnippet

snippet le
LOGGER.error(${0:msg})
endsnippet

# conflict with lambda=ld, therefor we change into Logger.debuG
snippet lg
LOGGER.debug(${0:msg})
endsnippet

snippet lw
LOGGER.warning(${0:msg})
endsnippet

snippet lc
LOGGER.critical(${0:msg})
endsnippet

snippet li
LOGGER.info(${0:msg})
endsnippet
