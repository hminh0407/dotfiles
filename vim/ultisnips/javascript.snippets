# ===Normal JS===
# module exports
snippet ex
module.exports = ${1};
endsnippet

snippet re
${1:const} ${2} = require('${3:module_name}');
endsnippet

# Flow control
snippet if "if (condition) { ... }"
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if (${1:true}) {
	${0:${VISUAL}}
} else {
	${2}
}
endsnippet

# tertiary conditional
snippet ter
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet

snippet switch
switch (${1:expression}) {
	case '${3:case}':
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case '${1:case}':
	${0:${VISUAL}}
break;
endsnippet

snippet try "try { ... } catch(e) { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
}
endsnippet

snippet tryf "try { ... } catch(e) { ... } finally { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
} finally {
	${3:/* be executed regardless of the try / catch result*/}
}
endsnippet

snippet terr
throw new Error('${1:error message}')
endsnippet

snippet for "for (...) {...}"
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${0:${VISUAL}}
}
endsnippet

snippet forr "reversed for (...) {...}"
for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${0:${VISUAL}}
}
endsnippet

snippet wh "(condition) { ... }"
while (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

snippet do "do { ... } while (condition)"
do {
	${0:${VISUAL}}
} while (${1:/* condition */});
endsnippet

snippet fori
for (var ${1:prop} in ${2:object}) {
	${0:$2[$1]}
}
endsnippet

snippet foro "for (element of array) {...}"
for (const ${1:element} of ${2:array}) {
	${0:$2[$1]}
}
endsnippet

# ===Custom Snippets===
snippet class_method_apply "dynamically evoke class method with apply"
#class Abc() {
#  method1(var1, var2) {}
#}
#
#const abc = new Abc();
#abc['method1'].apply(abc, ['var1', 'var2'])
endsnippet

snippet class_method_call "dynamically evoke class method with call"
#class Abc() {
#  method1(var1, var2) {}
#}
#
#const abc = new Abc();
#abc['method1'].call(abc, 'var1', 'var2')
endsnippet

snippet object_case_convert
function to change case of object with nested properties also work well with array object
use with change-case: https://github.com/blakeembrey/change-case
check change-case for supported cases
Ex:
* from: [{camelName: "value", nestedObject: {nestedProp: "nestedValue"}}]
* to: [{camel_name: "value", nested_object: {nested_prop: "nestedValue"}}]
function changeObjectCase(object, changeCaseFunc) {
	const recurObject = object => {
		if (object && typeof object === 'object') {
			Object.keys(object).forEach(key => {
				// change case
				const newName = changeCaseFunc(key);

				if (newName !== key) {
					// check if object own property
					if (Object.prototype.hasOwnProperty.call(object, key)) {
						object[newName] = object[key];
						delete object[key];
					}
				}

				// Recursion
				recurObject(object[newName]);
			});
		}
	};

	recurObject(obj);

	return obj;
}
endsnippet

snippet object_reduce
// create a sub object from an object
// https://stackoverflow.com/questions/17781472/how-to-get-a-subset-of-a-javascript-objects-properties
// Ex:
// * object = { a: 'a_value', b: 'b_value', c: 'c_value' }
// * pickFields = ['a', 'b']
// * result = { a: 'a_value', b: 'b_value' }
const object = $1
const pickFields = $2
const subObject = pickFields.reduce( //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce
	(acc,cur) => {
		acc[cur] = object[cur];
		return acc;
	},
	{} // default value
)
endsnippet

snippet array_object_reduce
// reduce an array object to pick
// Ex:
// * arrayObject = [ { a: 'a_value', b: 'b_value', c: 'c_value' }, { a: 'a__value', b: 'b__value', c: 'c__value' } ]
// * fields = ['a', 'b']
// * result = [ { a: 'a_value', b: 'b_value'}, { a: 'a__value', b: 'b__value' } ]
function mapReduce(arrayObject, fields) {
	return arrayObject.map(x =>
		fields.reduce((acc, cur) => {
			acc[cur] = _.get(x, cur);
			return acc;
		}, {})
	);
}
endsnippet

snippet array_include_any "Check if an array include any item of another array"
$1.some(i => $2.includes(i))
endsnippet

snippet array_include_all "Check if an array include all items of another array"
$2.every(i => $1.includes(i));
endsnippet
