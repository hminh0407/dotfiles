# A valid snippet should starts with:
#
#				snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#				endsnippet
#
# Snippet options:
#
#				b - Beginning of line.
#				i - In-word expansion.
#				w - Word boundary.
#				r - Regular expression
#				e - Custom context snippet
#				A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#				snippet emitter "emitter properties" b
#				private readonly ${1} = new Emitter<$2>()
#				public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#				endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet ms-ddl-tables "Show all tables"
SELECT
	*
FROM
	INFORMATION_SCHEMA.TABLES
WHERE
	TABLE_TYPE = 'BASE TABLE'
;
endsnippet

snippet ms-declare_var
DECLARE @{1:varName} ${varType}
SET @{1:varName} = ${varValue}
endsnippet

snippet ms-last_n_day "get datetime value of last n day"
${1:dateColumn} >= DATEADD(DAY, -${2:numberOfDay}, GETDATE())
endsnippet

snippet ms-check-cdc-columns-match "Check if the number of columns in cdc instance match with original table"
SELECT
  replace(col.table_name, 'dbo_', '') AS table_name,
  COUNT(col.column_name) AS column_count
FROM
  INFORMATION_SCHEMA.COLUMNS col
  JOIN information_schema.tables tbl ON tbl.table_name = col.table_name
  AND tbl.table_schema = col.table_schema
  AND tbl.table_catalog = col.table_catalog
  AND tbl.table_type <> 'VIEW'
WHERE
  col.column_name NOT LIKE '__$%' --
GROUP BY
  col.table_name
ORDER BY
  1;
endsnippet

snippet ms-check-database-info "Check database info"
SELECT name,database_id,create_date,recovery_model_desc,is_cdc_enabled FROM sys.databases
endsnippet

snippet ms-check-jobs "List all jobs"
select
sysjobs.name job_name
--,sysjobs.job_id
,sysjobs.enabled job_enabled
,sysjobs.description
,sysschedules.name schedule_name
--,sysschedules.schedule_id
--,sysschedules.schedule_uid
,sysschedules.enabled schedule_enabled
from msdb.dbo.sysjobs
inner join msdb.dbo.sysjobschedules on sysjobs.job_id = sysjobschedules.job_id
inner join msdb.dbo.sysschedules on sysjobschedules.schedule_id = sysschedules.schedule_id
order by sysjobs.enabled desc
endsnippet

snippet ms-check-jobs-status "List all jobs and their status, last, next run time"
SELECT
    [sJOB].[job_id] AS [JobID]
    , [sJOB].[name] AS [JobName]
    , CASE
        WHEN [sJOBH].[run_date] IS NULL OR [sJOBH].[run_time] IS NULL THEN NULL
        ELSE CAST(
                CAST([sJOBH].[run_date] AS CHAR(8))
                + ' '
                + STUFF(
                    STUFF(RIGHT('000000' + CAST([sJOBH].[run_time] AS VARCHAR(6)),  6)
                        , 3, 0, ':')
                    , 6, 0, ':')
                AS DATETIME)
      END AS [LastRunDateTime]
    , CASE [sJOBH].[run_status]
        WHEN 0 THEN 'Failed'
        WHEN 1 THEN 'Succeeded'
        WHEN 2 THEN 'Retry'
        WHEN 3 THEN 'Canceled'
        WHEN 4 THEN 'Running' -- In Progress
      END AS [LastRunStatus]
    , STUFF(
            STUFF(RIGHT('000000' + CAST([sJOBH].[run_duration] AS VARCHAR(6)),  6)
                , 3, 0, ':')
            , 6, 0, ':')
        AS [LastRunDuration (HH:MM:SS)]
    , [sJOBH].[message] AS [LastRunStatusMessage]
    , CASE [sJOBSCH].[NextRunDate]
        WHEN 0 THEN NULL
        ELSE CAST(
                CAST([sJOBSCH].[NextRunDate] AS CHAR(8))
                + ' '
                + STUFF(
                    STUFF(RIGHT('000000' + CAST([sJOBSCH].[NextRunTime] AS VARCHAR(6)),  6)
                        , 3, 0, ':')
                    , 6, 0, ':')
                AS DATETIME)
      END AS [NextRunDateTime]
FROM
    [msdb].[dbo].[sysjobs] AS [sJOB]
    LEFT JOIN (
                SELECT
                    [job_id]
                    , MIN([next_run_date]) AS [NextRunDate]
                    , MIN([next_run_time]) AS [NextRunTime]
                FROM [msdb].[dbo].[sysjobschedules]
                GROUP BY [job_id]
            ) AS [sJOBSCH]
        ON [sJOB].[job_id] = [sJOBSCH].[job_id]
    LEFT JOIN (
                SELECT
                    [job_id]
                    , [run_date]
                    , [run_time]
                    , [run_status]
                    , [run_duration]
                    , [message]
                    , ROW_NUMBER() OVER (
                                            PARTITION BY [job_id]
                                            ORDER BY [run_date] DESC, [run_time] DESC
                      ) AS RowNumber
                FROM [msdb].[dbo].[sysjobhistory]
                WHERE [step_id] = 0
            ) AS [sJOBH]
        ON [sJOB].[job_id] = [sJOBH].[job_id]
        AND [sJOBH].[RowNumber] = 1
WHERE
    [sJOB].enabled = 1
ORDER BY [JobName]
endsnippet

snippet ms-check-jobs-with-schedule "List all jobs with their schedule"
select
  S.name AS JobName,
  S.enabled AS JobEnabled,
  SS.name AS ScheduleName,
  --SS.enabled AS ScheduleEnabled,
  CASE
    (SS.freq_type)
    WHEN 1 THEN 'Once'
    WHEN 4 THEN 'Daily'
    WHEN 8 THEN (
      case
        when (SS.freq_recurrence_factor > 1) then 'Every ' + convert(varchar(3), SS.freq_recurrence_factor) + ' Weeks'
        else 'Weekly'
      end
    )
    WHEN 16 THEN (
      case
        when (SS.freq_recurrence_factor > 1) then 'Every ' + convert(varchar(3), SS.freq_recurrence_factor) + ' Months'
        else 'Monthly'
      end
    )
    WHEN 32 THEN 'Every ' + convert(varchar(3), SS.freq_recurrence_factor) + ' Months' -- RELATIVE
    WHEN 64 THEN 'SQL Startup'
    WHEN 128 THEN 'SQL Idle'
    ELSE '??'
  END AS Frequency,
  CASE
    WHEN (freq_type = 1) then 'One time only'
    WHEN (
      freq_type = 4
      and freq_interval = 1
    ) then 'Every Day'
    WHEN (
      freq_type = 4
      and freq_interval > 1
    ) then 'Every ' + convert(varchar(10), freq_interval) + ' Days'
    WHEN (freq_type = 8) then (
      select
        'Weekly Schedule' = MIN(D1 + D2 + D3 + D4 + D5 + D6 + D7)
      from
        (
          select
            SS.schedule_id,
            freq_interval,
            'D1' = CASE
              WHEN (freq_interval & 1 <> 0) then 'Sun '
              ELSE ''
            END,
            'D2' = CASE
              WHEN (freq_interval & 2 <> 0) then 'Mon '
              ELSE ''
            END,
            'D3' = CASE
              WHEN (freq_interval & 4 <> 0) then 'Tue '
              ELSE ''
            END,
            'D4' = CASE
              WHEN (freq_interval & 8 <> 0) then 'Wed '
              ELSE ''
            END,
            'D5' = CASE
              WHEN (freq_interval & 16 <> 0) then 'Thu '
              ELSE ''
            END,
            'D6' = CASE
              WHEN (freq_interval & 32 <> 0) then 'Fri '
              ELSE ''
            END,
            'D7' = CASE
              WHEN (freq_interval & 64 <> 0) then 'Sat '
              ELSE ''
            END
          from
            msdb..sysschedules ss
          where
            freq_type = 8
        ) as F
      where
        schedule_id = SJ.schedule_id
    )
    WHEN (freq_type = 16) then 'Day ' + convert(varchar(2), freq_interval)
    WHEN (freq_type = 32) then (
      select
        freq_rel + WDAY
      from
        (
          select
            SS.schedule_id,
            'freq_rel' = CASE
              (freq_relative_interval)
              WHEN 1 then 'First'
              WHEN 2 then 'Second'
              WHEN 4 then 'Third'
              WHEN 8 then 'Fourth'
              WHEN 16 then 'Last'
              ELSE '??'
            END,
            'WDAY' = CASE
              (freq_interval)
              WHEN 1 then ' Sun'
              WHEN 2 then ' Mon'
              WHEN 3 then ' Tue'
              WHEN 4 then ' Wed'
              WHEN 5 then ' Thu'
              WHEN 6 then ' Fri'
              WHEN 7 then ' Sat'
              WHEN 8 then ' Day'
              WHEN 9 then ' Weekday'
              WHEN 10 then ' Weekend'
              ELSE '??'
            END
          from
            msdb..sysschedules SS
          where
            SS.freq_type = 32
        ) as WS
      where
        WS.schedule_id = SS.schedule_id
    )
  END AS Interval,
  CASE
    (freq_subday_type)
    WHEN 1 then left(
      stuff(
        (
          stuff(
            (replicate('0', 6 - len(active_start_time))) + convert(varchar(6), active_start_time),
            3,
            0,
            ':'
          )
        ),
        6,
        0,
        ':'
      ),
      8
    )
    WHEN 2 then 'Every ' + convert(varchar(10), freq_subday_interval) + ' seconds'
    WHEN 4 then 'Every ' + convert(varchar(10), freq_subday_interval) + ' minutes'
    WHEN 8 then 'Every ' + convert(varchar(10), freq_subday_interval) + ' hours'
    ELSE '??'
  END AS [Time],
  CASE
    SJ.next_run_date
    WHEN 0 THEN cast('n/a' as char(10))
    ELSE convert(
      char(10),
      convert(datetime, convert(char(8), SJ.next_run_date)),
      120
    ) + ' ' + left(
      stuff(
        (
          stuff(
            (replicate('0', 6 - len(next_run_time))) + convert(varchar(6), next_run_time),
            3,
            0,
            ':'
          )
        ),
        6,
        0,
        ':'
      ),
      8
    )
  END AS NextRunTime
from
  msdb.dbo.sysjobs S
  left join msdb.dbo.sysjobschedules SJ on S.job_id = SJ.job_id
  left join msdb.dbo.sysschedules SS on SS.schedule_id = SJ.schedule_id
order by
  S.enabled,S.name
endsnippet

snippet ms-check-last-backup "check database last backup from history"
SELECT   d.name,
	--b.backup_set_uuid, b.name as backup_file_name, b.software_major_version,
	b.user_name, b.database_creation_date, b.backup_start_date, b.backup_finish_date
FROM     master.sys.sysdatabases d
LEFT OUTER JOIN msdb..backupset b ON b.database_name = d.name AND b.type = 'L'
ORDER BY backup_finish_date DESC
endsnippet

snippet ms-check-last-restore "check database last restore from history"
SELECT
    a.restore_history_id, a.restore_date, a.destination_database_name, a.user_name, a.restore_type
    --,b.type backup_type, b.first_lsn, b.last_lsn, b.checkpoint_lsn, b.database_backup_lsn
FROM msdb..restorehistory a
INNER JOIN msdb..backupset b ON a.backup_set_id = b.backup_set_id
ORDER BY restore_date DESC
endsnippet

# https://stackoverflow.com/questions/7272157/how-to-identify-all-stored-procedures-referring-a-particular-table
snippet ms-check-table-dependencies "Check if tables are used in store procedures or functions"
select
	distinct [Table Name] = o.Name,
	[Found In] = sp.Name,
	sp.type_desc
from
	sys.objects o
inner join sys.sql_expression_dependencies sd on
	o.object_id = sd.referenced_id
inner join sys.objects sp on
	sd.referencing_id = sp.object_id
	and sp.type in ('P', 'FN')
order by
	sp.Name;
endsnippet

snippet ms-check-log-space "Check log space"
DBCC SQLPERF(logspace)
endsnippet

snippet ms-check-slow-queries "Find the slowest completed queries in cache"
SELECT
  TOP 10 SUBSTRING(
    qt.TEXT,
    (qs.statement_start_offset / 2) + 1,
    (
      (
        CASE
          qs.statement_end_offset
          WHEN -1 THEN DATALENGTH(qt.TEXT)
          ELSE qs.statement_end_offset
        END - qs.statement_start_offset
      ) / 2
    ) + 1
  ),
  qs.execution_count,
  qs.total_logical_reads,
  qs.last_logical_reads,
  qs.total_logical_writes,
  qs.last_logical_writes,
  qs.total_worker_time,
  qs.last_worker_time,
  qs.total_elapsed_time / 1000000 total_elapsed_time_in_S,
  qs.last_elapsed_time / 1000000 last_elapsed_time_in_S,
  qs.last_execution_time,
  qp.query_plan
FROM
  sys.dm_exec_query_stats qs
  CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) qt
  CROSS APPLY sys.dm_exec_query_plan(qs.plan_handle) qp
ORDER BY total_elapsed_time / execution_count DESC
-- ORDER BY qs.total_logical_reads DESC -- logical reads
-- ORDER BY qs.total_logical_writes DESC -- logical writes
-- ORDER BY qs.total_worker_time DESC -- CPU time
;
endsnippet

snippet ms-user-permissions "Show permissions of all user"
SELECT
	DISTINCT
	pr.principal_id,
	pr.name,
	--pr.type_desc,
	--pr.authentication_type_desc,
	--pe.state_desc,
	pe.permission_name
FROM
	sys.database_principals AS pr
JOIN sys.database_permissions AS pe ON
	pe.grantee_principal_id = pr.principal_id
ORDER BY pr.name
endsnippet

snippet ms-user-roles "Show roles of all user"
SELECT
   isnull (DP2.name, 'No members') AS DatabaseUserName,
   DP1.name AS DatabaseRoleName
 FROM sys.database_role_members AS DRM
 RIGHT OUTER JOIN sys.database_principals AS DP1
   ON DRM.role_principal_id = DP1.principal_id
 LEFT OUTER JOIN sys.database_principals AS DP2
   ON DRM.member_principal_id = DP2.principal_id
WHERE DP1.type = 'R'
ORDER BY DP2.name;
endsnippet

snippet ms-info-buffer-table-usage "information on how much page's usage for each table"
WITH CTE_BUFFER_CACHE AS (
	SELECT
		objects.name AS object_name,
		objects.type_desc AS object_type_description,
		objects.object_id,
		COUNT(*) AS buffer_cache_pages,
		CAST(COUNT(*) * 8 AS DECIMAL) / 1024  AS buffer_cache_in_MB,
		CAST(SUM(CAST(dm_os_buffer_descriptors.free_space_in_bytes AS BIGINT)) AS DECIMAL) / 1024 / 1024 AS buffer_cache_free_space_in_MB,
		CAST((CAST(SUM(CAST(dm_os_buffer_descriptors.free_space_in_bytes AS BIGINT)) AS DECIMAL) / 1024 / 1024) / (CAST(COUNT(*) * 8 AS DECIMAL) / 1024) * 100 AS DECIMAL(5,2)) AS buffer_cache_percent_free_space,
                SUM(CASE WHEN dm_os_buffer_descriptors.is_modified = 1
                                            THEN 1
                                            ELSE 0
                            END) * 8 / 1024 AS buffer_cache_dirty_page_MB,
                SUM(CASE WHEN dm_os_buffer_descriptors.is_modified = 1
                                            THEN 0
                                            ELSE 1
                            END) * 8 / 1024 AS buffer_cache_clean_page_MB
	FROM sys.dm_os_buffer_descriptors
	INNER JOIN sys.allocation_units
		ON allocation_units.allocation_unit_id = dm_os_buffer_descriptors.allocation_unit_id
	INNER JOIN sys.partitions
		ON ((allocation_units.container_id = partitions.hobt_id AND type IN (1,3))
		OR (allocation_units.container_id = partitions.partition_id AND type IN (2)))
	INNER JOIN sys.objects
		ON partitions.object_id = objects.object_id
	WHERE allocation_units.type IN (1,2,3)
		AND objects.is_ms_shipped = 0
		AND dm_os_buffer_descriptors.database_id = DB_ID()
	GROUP BY objects.name,
		 objects.type_desc,
		 objects.object_id
	HAVING COUNT(*) * 8 / 1024 > 1 -- buffer_cache_in_MB
)
SELECT
	PARTITION_STATS.name,
	CTE_BUFFER_CACHE.object_type_description,
	CTE_BUFFER_CACHE.buffer_cache_pages,
	CTE_BUFFER_CACHE.buffer_cache_in_MB,
	PARTITION_STATS.total_used_pages,
	PARTITION_STATS.total_used_pages * 8 / 1024 AS total_mb,
	CAST((CAST(CTE_BUFFER_CACHE.buffer_cache_pages AS DECIMAL) / CAST(PARTITION_STATS.total_used_pages AS DECIMAL) * 100) AS DECIMAL(5,2)) AS percent_of_pages_in_memory,
        CTE_BUFFER_CACHE.buffer_cache_free_space_in_MB,
        CTE_BUFFER_CACHE.buffer_cache_percent_free_space,
        CTE_BUFFER_CACHE.buffer_cache_dirty_page_MB,
        CTE_BUFFER_CACHE.buffer_cache_clean_page_MB
FROM CTE_BUFFER_CACHE
INNER JOIN (
		SELECT
			objects.name,
			objects.object_id,
			SUM(used_page_count) AS total_used_pages
		FROM sys.dm_db_partition_stats
		INNER JOIN sys.objects
		ON objects.object_id = dm_db_partition_stats.object_id
		WHERE objects.is_ms_shipped = 0
		GROUP BY objects.name, objects.object_id) PARTITION_STATS
	ON PARTITION_STATS.object_id = CTE_BUFFER_CACHE.object_id
ORDER BY CAST(CTE_BUFFER_CACHE.buffer_cache_pages AS DECIMAL) / CAST(PARTITION_STATS.total_used_pages AS DECIMAL) DESC;
endsnippet

snippet ms-info-buffer-table-index-usage "information on how much page's usage for each index in a table"
SELECT
	indexes.name AS index_name,
	objects.name AS object_name,
	objects.type_desc AS object_type_description,
	COUNT(*) AS buffer_cache_pages,
	COUNT(*) * 8 / 1024  AS buffer_cache_in_MB,
	SUM(allocation_units.used_pages) AS pages_in_index,
	SUM(allocation_units.used_pages) * 8 /1024 AS index_size_in_MB,
	CAST((CAST(COUNT(*) AS DECIMAL) / CAST(SUM(allocation_units.used_pages) AS DECIMAL) * 100) AS DECIMAL(5,2)) AS percent_of_pages_in_memory
FROM sys.dm_os_buffer_descriptors
INNER JOIN sys.allocation_units
	ON allocation_units.allocation_unit_id = dm_os_buffer_descriptors.allocation_unit_id
INNER JOIN sys.partitions
	ON ((allocation_units.container_id = partitions.hobt_id AND type IN (1,3))
	OR (allocation_units.container_id = partitions.partition_id AND type IN (2)))
INNER JOIN sys.objects
	ON partitions.object_id = objects.object_id
INNER JOIN sys.indexes
	ON objects.object_id = indexes.object_id
	AND partitions.index_id = indexes.index_id
WHERE allocation_units.type IN (1,2,3)
	AND objects.is_ms_shipped = 0
	AND dm_os_buffer_descriptors.database_id = DB_ID()
GROUP BY indexes.name,
		 objects.name,
		 objects.type_desc
HAVING COUNT(*) * 8 / 1024 > 50 -- buffer_cache_in_MB > 50
ORDER BY CAST((CAST(COUNT(*) AS DECIMAL) / CAST(SUM(allocation_units.used_pages) AS DECIMAL) * 100) AS DECIMAL(5,2)) DESC;
endsnippet

snippet ms-info-cdc-related "Show all tables with cdc instance"
select tb.object_id, tb.name as dbo_name, ct.capture_instance as cdc_name
from cdc.change_tables ct
join sys.tables tb on ct.source_object_id = tb.object_id
endsnippet

snippet ms-info-open-connection "Find the number of active connection in database"
SELECT
    DB_NAME(DBID) AS DataBaseName
    ,COUNT(DBID) AS NumberOfConnections
    ,LogiName
FROM sys.sysprocesses
WHERE DBID > 0
GROUP BY DBID, LogiName
endsnippet

snippet ms-info-open-connection-detail "Check current connection and who is connecting to db"
SELECT sdest.DatabaseName
    ,sdes.session_id
    ,sdes.[host_name]
    ,sdes.[program_name]
    ,sdes.client_interface_name
    ,sdes.login_name
    ,sdes.login_time
    ,sdes.nt_domain
    ,sdes.nt_user_name
    ,sdec.client_net_address
    ,sdec.local_net_address
    ,sdest.ObjName
    ,sdest.Query
FROM sys.dm_exec_sessions AS sdes
INNER JOIN sys.dm_exec_connections AS sdec ON sdec.session_id = sdes.session_id
CROSS APPLY (
    SELECT db_name(dbid) AS DatabaseName
        ,object_id(objectid) AS ObjName
        ,ISNULL((
                SELECT TEXT AS [processing-instruction(definition)]
                FROM sys.dm_exec_sql_text(sdec.most_recent_sql_handle)
                FOR XML PATH('')
                    ,TYPE
                ), '') AS Query

    FROM sys.dm_exec_sql_text(sdec.most_recent_sql_handle)
    ) sdest
where sdes.session_id <> @@SPID
--and sdes.nt_user_name = '' -- Put the username here !
ORDER BY sdec.session_id
endsnippet

snippet ms-info-running-query "Check running query" b
SELECT sqltext.TEXT,
req.session_id,
req.status,
req.start_time,
req.command,
req.cpu_time,
req.total_elapsed_time
FROM sys.dm_exec_requests req
CROSS APPLY sys.dm_exec_sql_text(sql_handle) AS sqltext
endsnippet

snippet ms-info-sp "show all store procedures in db"
SELECT schema_name(obj.schema_id) AS SCHEMA_NAME,
       obj.name AS procedure_name,
       CASE TYPE
           WHEN 'P' THEN 'SQL Stored Procedure'
           WHEN 'X' THEN 'Extended stored procedure'
       END AS TYPE
FROM sys.objects obj
WHERE obj.type IN ('P', 'X')
ORDER BY SCHEMA_NAME, procedure_name;
endsnippet

snippet ms-info-user-login "get list of USER and their connected LOGIN"
SELECT *
FROM
    sys.database_principals dp
LEFT JOIN sys.server_principals sp ON dp.sid = sp.sid
    AND dp.type_desc = 'SQL_USER' AND sp.type_desc = 'SQL_LOGIN'
WHERE
    dp.type_desc = 'SQL_USER' AND sp.type_desc = 'SQL_LOGIN'
endsnippet

snippet ms-info-login "get list of LOGIN"
SELECT name, sid, type_desc, create_date, modify_date
FROM sys.server_principals
WHERE type_desc = 'SQL_LOGIN'
endsnippet

# check https://www.itprotoday.com/strategy/cloning-security-objects-between-servers
snippet ms-sp_hexadecimal "sp_hexadecimal procedure to convert binary to string"
--=============================
-- CREATE sp_hexadecimal
--=============================
USE [master]
GO

CREATE PROCEDURE sp_hexadecimal
    @binvalue varbinary(256),
    @hexvalue varchar (514) OUTPUT
AS
DECLARE @charvalue varchar (514)
DECLARE @i int
DECLARE @length int
DECLARE @hexstring char(16)
SELECT @charvalue = '0x'
SELECT @i = 1
SELECT @length = DATALENGTH (@binvalue)
SELECT @hexstring = '0123456789ABCDEF'
WHILE (@i <= @length)
BEGIN
  DECLARE @tempint int
  DECLARE @firstint int
  DECLARE @secondint int
  SELECT @tempint = CONVERT(int, SUBSTRING(@binvalue,@i,1))
  SELECT @firstint = FLOOR(@tempint/16)
  SELECT @secondint = @tempint - (@firstint*16)
  SELECT @charvalue = @charvalue +
    SUBSTRING(@hexstring, @firstint+1, 1) +
    SUBSTRING(@hexstring, @secondint+1, 1)
  SELECT @i = @i + 1
END

SELECT @hexvalue = @charvalue;
GO
endsnippet

# check https://www.itprotoday.com/strategy/cloning-security-objects-between-servers
snippet ms-sp_help_revlogin "sp_help_revlogin procedure to produces code that will recreate a login and force the SID as part of the creation to reduce the likelihood of SID mismatches between logins and users copied between instances"
--=============================
-- CREATE sp_help_revlogin
--=============================
USE [master]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_help_revlogin] @login_name sysname = NULL AS
DECLARE @name sysname
DECLARE @type varchar (1)
DECLARE @hasaccess int
DECLARE @denylogin int
DECLARE @is_disabled int
DECLARE @PWD_varbinary  varbinary (256)
DECLARE @PWD_string  varchar (514)
DECLARE @SID_varbinary varbinary (85)
DECLARE @SID_string varchar (514)
DECLARE @tmpstr  varchar (1024)
DECLARE @is_policy_checked varchar (3)
DECLARE @is_expiration_checked varchar (3)

DECLARE @defaultdb sysname

IF (@login_name IS NULL)
  DECLARE login_curs CURSOR FOR

  SELECT p.sid, p.name, p.type, p.is_disabled, p.default_database_name, l.hasaccess, l.denylogin FROM
sys.server_principals p LEFT JOIN sys.syslogins l
  ON ( l.name = p.name ) WHERE p.type IN ( 'S', 'G', 'U' ) AND p.name <> 'sa'
ELSE
  DECLARE login_curs CURSOR FOR

SELECT p.sid, p.name, p.type, p.is_disabled, p.default_database_name, l.hasaccess, l.denylogin FROM
sys.server_principals p LEFT JOIN sys.syslogins l
  ON ( l.name = p.name ) WHERE p.type IN ( 'S', 'G', 'U' ) AND p.name = @login_name
OPEN login_curs

FETCH NEXT FROM login_curs INTO @SID_varbinary, @name, @type, @is_disabled, @defaultdb, @hasaccess, @denylogin
IF (@@fetch_status = -1)
BEGIN
  PRINT 'No login(s) found.'
  CLOSE login_curs
  DEALLOCATE login_curs
  RETURN -1
END
SET @tmpstr = '/* sp_help_revlogin script '
PRINT @tmpstr
SET @tmpstr = '** Generated ' + CONVERT (varchar, GETDATE()) + ' on ' + @@SERVERNAME + ' */'
PRINT @tmpstr
PRINT ''
WHILE (@@fetch_status <> -1)
BEGIN
  IF (@@fetch_status <> -2)
  BEGIN
    PRINT ''
    SET @tmpstr = '-- Login: ' + @name
    PRINT @tmpstr
    IF (@type IN ( 'G', 'U'))
    BEGIN -- NT authenticated account/group

  SET @tmpstr = 'CREATE LOGIN ' + QUOTENAME( @name ) + ' FROM WINDOWS WITH DEFAULT_DATABASE = [' + @defaultdb + ']'
    END
    ELSE BEGIN -- SQL Server authentication
    -- obtain password and sid
    SET @PWD_varbinary = CAST( LOGINPROPERTY( @name, 'PasswordHash' ) AS varbinary (256) )
    EXEC sp_hexadecimal @PWD_varbinary, @PWD_string OUT
    EXEC sp_hexadecimal @SID_varbinary,@SID_string OUT

 -- obtain password policy state
    SELECT @is_policy_checked = CASE is_policy_checked WHEN 1 THEN 'ON' WHEN 0 THEN 'OFF' ELSE NULL END FROM sys.sql_logins WHERE name = @name
    SELECT @is_expiration_checked = CASE is_expiration_checked WHEN 1 THEN 'ON' WHEN 0 THEN 'OFF' ELSE NULL END FROM sys.sql_logins WHERE name = @name

 SET @tmpstr = 'CREATE LOGIN ' + QUOTENAME( @name ) + ' WITH PASSWORD = ' + @PWD_string + ' HASHED, SID = ' + @SID_string + ', DEFAULT_DATABASE = [' + @defaultdb + ']'

IF ( @is_policy_checked IS NOT NULL )
    BEGIN
  SET @tmpstr = @tmpstr + ', CHECK_POLICY = ' + @is_policy_checked
    END
    IF ( @is_expiration_checked IS NOT NULL )
    BEGIN
  SET @tmpstr = @tmpstr + ', CHECK_EXPIRATION = ' + @is_expiration_checked
    END
    END
    IF (@denylogin = 1)
    BEGIN -- login is denied access
  SET @tmpstr = @tmpstr + '; DENY CONNECT SQL TO ' + QUOTENAME( @name )
    END
    ELSE IF (@hasaccess = 0)
    BEGIN -- login exists but does not have access
  SET @tmpstr = @tmpstr + '; REVOKE CONNECT SQL TO ' + QUOTENAME( @name )
    END
    IF (@is_disabled = 1)
    BEGIN -- login is disabled
  SET @tmpstr = @tmpstr + '; ALTER LOGIN ' + QUOTENAME( @name ) + ' DISABLE'
    END
    PRINT @tmpstr
  END

  FETCH NEXT FROM login_curs INTO @SID_varbinary, @name, @type, @is_disabled, @defaultdb, @hasaccess, @denylogin
   END
CLOSE login_curs
DEALLOCATE login_curs
RETURN 0
GO
endsnippet

snippet pg-tb-add-column "Add new Column to table"
ALTER TABLE ${1:table_name} ADD COLUMN IF NOT EXISTS ${2:column_name} ${3:column_type};
endsnippet

snippet pg-tb-drop-column "Add new Column to table"
ALTER TABLE ${1:table_name} DROP COLUMN IF EXISTS ${2:column_name} ${3:column_type};
endsnippet

snippet pg-db_alter_db_owner
ALTER DATABASE ${1:database} OWNER TO ${2:owner};
endsnippet

snippet pg-create_role
CREATE ROLE ${1:role} LOGIN PASSWORD '${2:pass}';
endsnippet

snippet pg-info-active-connection "Show all active connection"
SELECT
    pid
    ,datname
    ,usename
    ,application_name
    ,client_hostname
    ,client_port
    ,backend_start
    ,query_start
    ,query
    ,state
FROM pg_stat_activity
WHERE state = 'active';
endsnippet

snippet pg-info_db
SELECT
	d.datname AS Name,
	pg_catalog.pg_get_userbyid(d.datdba) AS Owner,
	CASE
		WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')
			THEN pg_catalog.pg_size_pretty(pg_catalog.pg_database_size(d.datname))
		ELSE 'No Access'
	END AS SIZE
FROM pg_catalog.pg_database d
ORDER BY
	CASE
		WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')
			THEN pg_catalog.pg_database_size(d.datname)
		ELSE NULL
	END DESC -- nulls first
LIMIT 20
endsnippet

snippet pg-info_ddl
SELECT
	table_name,
	column_name,
	data_type,
	udt_name,
	is_nullable,
	character_maximum_length
FROM
	information_schema.columns
WHERE
	table_schema = 'public'
ORDER BY
	table_name,
	ordinal_position;
endsnippet

snippet pg-info_index "Show index of all tables"
SELECT
	*
FROM
	pg_indexes
WHERE
	schemaname = 'public'
ORDER BY
	tablename,
	indexname;
endsnippet

snippet pg-info_ref "Show table references"
SELECT
	tc.table_schema,
	tc.constraint_name,
	tc.table_name,
	kcu.column_name,
	ccu.table_schema AS foreign_table_schema,
	ccu.table_name AS foreign_table_name,
	ccu.column_name AS foreign_column_name
FROM
	information_schema.table_constraints AS tc
	JOIN information_schema.key_column_usage AS kcu ON tc.constraint_name = kcu.constraint_name
	AND tc.table_schema = kcu.table_schema
	JOIN information_schema.constraint_column_usage AS ccu ON ccu.constraint_name = tc.constraint_name
	AND ccu.table_schema = tc.table_schema
WHERE
	tc.constraint_type = 'FOREIGN KEY'
endsnippet

snippet pg-info-role-previleges "Show role and its previleges"
SELECT
	grantee AS user,
	CONCAT(table_schema, '.', table_name) AS table,
	CASE
		WHEN COUNT(privilege_type) = 7 THEN 'ALL'
		ELSE ARRAY_TO_STRING(ARRAY_AGG(privilege_type), ', ')
	END AS grants
FROM
	information_schema.role_table_grants
GROUP BY
	table_name,
	table_schema,
	grantee
ORDER BY
	grantee;
endsnippet

snippet pg-info-role-users "Show role and user information"
SELECT r.rolname, r.rolsuper, r.rolinherit,
  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,
  r.rolconnlimit, r.rolvaliduntil,
  ARRAY(SELECT b.rolname
        FROM pg_catalog.pg_auth_members m
        JOIN pg_catalog.pg_roles b ON (m.roleid = b.oid)
        WHERE m.member = r.oid) as memberof
, r.rolreplication
, r.rolbypassrls
FROM pg_catalog.pg_roles r
WHERE r.rolname !~ '^pg_'
ORDER BY 1;
endsnippet

snippet pg-info_table_size "Show tables size"
SELECT
	oid,
	table_schema,
	table_name,
	row_estimate,
	pg_size_pretty(total_bytes) AS total,
	pg_size_pretty(index_bytes) AS INDEX,
	pg_size_pretty(toast_bytes) AS toast,
	pg_size_pretty(table_bytes) AS TABLE
FROM
	(
		SELECT
			*,
			total_bytes - index_bytes - COALESCE(toast_bytes, 0) AS table_bytes
			FROM
			(
				SELECT
					c.oid,
					nspname AS table_schema,
					relname AS TABLE_NAME,
					c.reltuples AS row_estimate,
					pg_total_relation_size(c.oid) AS total_bytes,
					pg_indexes_size(c.oid) AS index_bytes,
					pg_total_relation_size(reltoastrelid) AS toast_bytes
				FROM
					pg_class c
					LEFT JOIN pg_namespace n ON n.oid = c.relnamespace
				WHERE
					relkind = 'r'
					AND nspname IN ('public')
			) a
	) a
ORDER BY
	total_bytes DESC
endsnippet

snippet pg-insert
INSERT
	INTO ${1:table}
		(${2:columns})
	VALUES
		(${3:values}),
		();
endsnippet

snippet pg-drop-process "drop a postgres process by its id"
pg_terminate_backend($1)
endsnippet

snippet pg-view_def
		select pg_get_viewdef('${0:name}', true);
endsnippet

snippet pg-truncate-all-tables-query
		SELECT
				'TRUNCATE ' || input_table_name || ' CASCADE;' AS truncate_query
		FROM (
				SELECT
						table_schema || '.' || table_name AS input_table_name
				FROM information_schema.tables
				WHERE table_schema NOT IN ('pg_catalog', 'information_schema') AND table_schema NOT LIKE 'pg_toast%'
		) AS information;
endsnippet
